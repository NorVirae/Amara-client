/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useEffect, useRef, useState } from 'react'
import { useAnimations, useGLTF } from '@react-three/drei'
import { button, useControls } from 'leva'
import * as THREE from "three";
import { facialExpressions, gestures, lipsyncData } from '../utils/constants';
import { useFrame } from '@react-three/fiber';

// face configs


export function Character(props) {
    const { nodes, materials, scene } = useGLTF('public/models/679f5cb66914737cb84fb910.glb')
    const { animations } = useGLTF('public/models/animations.glb')
    const group = useRef()
    const { actions, mixer } = useAnimations(animations, group);
    const [animation, setAnimation] = useState("Idle")
    const [configMode, setConfigMode] = useState(false)
    const [lipsync, setLipsync] = useState(lipsyncData)

    const [facialExpression, setFacialExpression] = useState("smile")
    // plays Animation clip if not null
    useEffect(() => {
        // nodes.Wolf3D_Head.morphTargetDictionary
        console.log(animation, actions)
        if (actions) {
            actions[animation]
                .reset()
                .fadeIn(mixer.stats.actions.inUse === 0 ? 0 : 0.5)
                .play();
        }

        return () => actions[animation].fadeOut(0.5);
    }, [animation]);

    // handles message input and plays sound
    useEffect(() => {
        console.log(message, "message")
        if (!message) {
            setAnimation("Idle");
            return;
        }
        setValidAnimation(message.animation);
        setValidFacialAnimation(message.facialExpression);
        setLipsync(message.lipsync);
        const audio = new Audio("data:audio/mp3;base64," + message.audio);
        audio.play();
        setAudio(audio);
        audio.onended = onMessagePlayed;
    }, [message]);

    useFrame(() => {
        !configMode && Object.keys(nodes.EyeLeft.morphTargetDictionary).forEach((key) => {
            const mapping = facialExpressions[facialExpression];
            if (key === "eyeBlinkLeft" || key === "eyeBlinkRight") {
                return; // eyes wink/blink are handled separately
            }
            if (mapping && mapping[key]) {
                lerpMorphTarget(key, mapping[key], 0.1);
            } else {
                lerpMorphTarget(key, 0, 0.1);
            }
        });

        if (lipsync) {
            const currentAudioTime = audio.currentTime;
            for (let i = 0; i < lipsync.mouthCues.length; i++) {
                const mouthCue = lipsync.mouthCues[i];
                if (
                    currentAudioTime >= mouthCue.start &&
                    currentAudioTime <= mouthCue.end
                ) {
                    appliedMorphTargets.push(facialBones[mouthCue.value]);
                    lerpMorphTarget(facialBones[mouthCue.value], 1, 0.2);
                    break;
                }
            }
        }
    })

    //handles all facial actions
    useControls("FacialExpressions", {
        chat: button(() => chat()),
        winkLeft: button(() => {
            setWinkLeft(true);
            setTimeout(() => setWinkLeft(false), 300);
        }),
        winkRight: button(() => {
            setWinkRight(true);
            setTimeout(() => setWinkRight(false), 300);
        }),
        animation: {
            value: animation,
            options: animations.map((a) => a.name),
            onChange: (value) => setAnimation(value),
        },
        facialExpression: {
            options: Object.keys(facialExpressions),
            onChange: (value) => setFacialExpression(value),
        },
        enableSetupMode: button(() => {
            setConfigMode(true)
        }),
        disableSetupMode: button(() => {
            setConfigMode(false)

        }),
        logMorphTargetValues: button(() => {
            const emotionValues = {};
            console.log(nodes, "NODES")
            Object.keys(nodes.EyeLeft.morphTargetDictionary).forEach((key) => {
                if (key === "eyeBlinkLeft" || key === "eyeBlinkRight") {
                    return; // eyes wink/blink are handled separately
                }
                const value =
                    nodes.EyeLeft.morphTargetInfluences[
                    nodes.EyeLeft.morphTargetDictionary[key]
                    ];
                if (value > 0.01) {
                    emotionValues[key] = value;
                }
            });
            console.log(JSON.stringify(emotionValues, null, 2));
        }),
    });


    const [, set] = useControls("MorphTarget", () =>
        Object.assign(
            {},
            ...Object.keys(nodes.EyeLeft.morphTargetDictionary).map((key) => {
                return {
                    [key]: {
                        label: key,
                        value: 0,
                        min: nodes.EyeLeft.morphTargetInfluences[
                            nodes.EyeLeft.morphTargetDictionary[key]
                        ],
                        max: 1,
                        onChange: (val) => {
                            // if (setupMode) {
                            lerpMorphTarget(key, val, 1);
                            // }
                        },
                    },
                };
            })
        )
    );

    // Function to execute animation depending on the bone or node
    const lerpMorphTarget = (target, value, speed = 0.1) => {
        scene.traverse((child) => {
            if (child.isSkinnedMesh && child.morphTargetDictionary) {
                const index = child.morphTargetDictionary[target];
                if (
                    index === undefined ||
                    child.morphTargetInfluences[index] === undefined
                ) {
                    return;
                }
                child.morphTargetInfluences[index] = THREE.MathUtils.lerp(
                    child.morphTargetInfluences[index],
                    value,
                    speed
                );

                // if (!setupMode) {
                try {
                    set({
                        [target]: value,
                    });
                } catch (e) { }
                // }
            }
        });
    };

    return (
        <group {...props} dispose={null} ref={group}>
            <primitive object={nodes.Hips} />
            <skinnedMesh
                name="EyeLeft"
                geometry={nodes.EyeLeft.geometry}
                material={materials.Wolf3D_Eye}
                skeleton={nodes.EyeLeft.skeleton}
                morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary}
                morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences}
            />
            <skinnedMesh
                name="EyeRight"
                geometry={nodes.EyeRight.geometry}
                material={materials.Wolf3D_Eye}
                skeleton={nodes.EyeRight.skeleton}
                morphTargetDictionary={nodes.EyeRight.morphTargetDictionary}
                morphTargetInfluences={nodes.EyeRight.morphTargetInfluences}
            />
            <skinnedMesh
                name="Wolf3D_Head"
                geometry={nodes.Wolf3D_Head.geometry}
                material={materials.Wolf3D_Skin}
                skeleton={nodes.Wolf3D_Head.skeleton}
                morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary}
                morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences}
            />
            <skinnedMesh
                name="Wolf3D_Teeth"
                geometry={nodes.Wolf3D_Teeth.geometry}
                material={materials.Wolf3D_Teeth}
                skeleton={nodes.Wolf3D_Teeth.skeleton}
                morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary}
                morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences}
            />
            <skinnedMesh
                geometry={nodes.Wolf3D_Hair.geometry}
                material={materials.Wolf3D_Hair}
                skeleton={nodes.Wolf3D_Hair.skeleton}
            />
            <skinnedMesh
                geometry={nodes.Wolf3D_Body.geometry}
                material={materials.Wolf3D_Body}
                skeleton={nodes.Wolf3D_Body.skeleton}
            />
            <skinnedMesh
                geometry={nodes.Wolf3D_Outfit_Bottom.geometry}
                material={materials.Wolf3D_Outfit_Bottom}
                skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton}
            />
            <skinnedMesh
                geometry={nodes.Wolf3D_Outfit_Footwear.geometry}
                material={materials.Wolf3D_Outfit_Footwear}
                skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton}
            />
            <skinnedMesh
                geometry={nodes.Wolf3D_Outfit_Top.geometry}
                material={materials.Wolf3D_Outfit_Top}
                skeleton={nodes.Wolf3D_Outfit_Top.skeleton}
            />
        </group>
    )
}

useGLTF.preload('/679f5cb66914737cb84fb910.glb')
